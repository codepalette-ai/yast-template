---
description: 
globs: 
alwaysApply: true
---
### Framework
- Next.js 15 Monorepo
- React 19
- TypeScript
- Use pnpm to run commands.

### Styling
All the styling for this monorepo is present in packages/design-system. All the shadcn components are present in that folder.
- Tailwind CSS 4
- Shadcn

### Database
All the database related files are present in packages/database. I am using Prisma to manage database

### Authentication
Clerk is an auth provider that provides UI components as well as the functionality for authentication and authorization

### File Structure
apps/ => Web
packages/
- ai - Vercel AI SDK
- analytics - PostHog
- auth - Clerk
- cookie - Cookie Consent
- database - Prisma
- design-system - shadcn, Tailwind CSS v4
- email - React Email and Resend
- next-config - Shared Next.js Config for all the apps
- observability - Better Stack
- Payments - Stripe
- Security - Arcjet
- SEO - All the shared Metadata for the apps
- storage - Vercel Blob Storage
- testing - Vitest


### General Instructions
- Always plan and think before writing any code. 
- Refactor if any file exceeds more than 300 lines
- Keep the naming very clean
- Use hyphenated lowercase for naming components
- Any new components will be created in apps/web/components folder
- UI and UX are super important. Make sure the UI looks very clean, modern and always consider light and dark modes while coming up with ui
- All the backend logic should use Next.js Server Actions. Use apps/web/actions for all the server actions
- Before creating new code, always check for the existing code that can be reused with any minor modifications. 
- IMPORTANT - Write test cases, make them fail and then go on about writing the actual code and ensure the test cases pass. 
- Break down any big or complex implementation into smaller tasks and execute them one by one ensuring the testing, ui, backend and functionality are all the working correctly. 
- Use Server Components as much as possible. If the server component needs client, then move that code into a new client component in that folder or if it's generic, create it in the components folder. 
- Make use of useOptimistic from React 19 to have smoother way to making updates.
- Add loading pages wherever necessary to provide a great user expereince.

